import os
import asyncio
import sqlite3
import json
from telethon import TelegramClient, events
from telethon.errors import ChannelPrivateError
from dotenv import load_dotenv

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
load_dotenv()

API_ID = int(os.getenv("TELEGRAM_API_ID"))
API_HASH = os.getenv("TELEGRAM_API_HASH")
SESSION = os.getenv("TG_SESSION", "vitaliy_session")
TARGET = "@vitaliy_otkrutochkin" 
TO = os.getenv("TELEGRAM_TO")    
MEDIA_DIR = os.getenv("MEDIA_DIR", "media_vitaliy")

os.makedirs(MEDIA_DIR, exist_ok=True)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ---
conn = sqlite3.connect("vitaliy_posts.db", check_same_thread=False)
cur = conn.cursor()
cur.execute("""
CREATE TABLE IF NOT EXISTS posts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    msg_id INTEGER,
    text TEXT,
    date TEXT,
    media_path TEXT,
    has_media INTEGER,
    raw_json TEXT
)
""")
conn.commit()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ ---
client = TelegramClient(SESSION, API_ID, API_HASH)

@client.on(events.NewMessage(chats=TARGET))
async def new_post_handler(event):
    msg = event.message
    text = msg.message or ""
    date = msg.date.isoformat()
    has_media = 0
    media_path = None

    # --- –°–∫–∞—á–∏–≤–∞–µ–º –º–µ–¥–∏–∞ ---
    if msg.media:
        has_media = 1
        try:
            filename = f"{msg.id}"
            path = await client.download_media(msg.media, file=os.path.join(MEDIA_DIR, filename))
            media_path = path
            print(f"üì∏ –ú–µ–¥–∏–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {path}")
        except Exception as e:
            print("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:", e)

    # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î ---
    raw = json.dumps(msg.to_dict(), default=str, ensure_ascii=False)
    cur.execute("""
        INSERT INTO posts (msg_id, text, date, media_path, has_media, raw_json)
        VALUES (?, ?, ?, ?, ?, ?)
    """, (msg.id, text, date, media_path, has_media, raw))
    conn.commit()

    # --- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ---
    try:
        if has_media and media_path:
            await client.send_file(TO, media_path, caption=text or "üì¢ –ù–æ–≤—ã–π –ø–æ—Å—Ç!")
        else:
            await client.send_message(TO, f"üì¢ –ù–æ–≤—ã–π –ø–æ—Å—Ç:\n\n{text}")
        print(f"‚úâÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚Üí {TO}")
    except Exception as e:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", e)

    print(f"üí¨ –ù–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è ({msg.id}): {text[:80]!r}")

async def main():
    try:
        await client.start()
        print(f"‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω. –°–ª—É—à–∞—é –∫–∞–Ω–∞–ª {TARGET} –∏ –ø–µ—Ä–µ—Å—ã–ª–∞—é –≤ {TO}...")
        await client.run_until_disconnected()
    except ChannelPrivateError:
        print("‚ùå –ö–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏–ª–∏ –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª.")

if __name__ == "__main__":
    asyncio.run(main())
